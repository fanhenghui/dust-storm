// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mi_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mi_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace medical_imaging {
class MsgStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgString> {
} _MsgString_default_instance_;
class MsgPoint2DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgPoint2> {
} _MsgPoint2_default_instance_;
class MsgPoint2ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgPoint2Array> {
} _MsgPoint2Array_default_instance_;
class MsgPagingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgPaging> {
} _MsgPaging_default_instance_;
class MsgRotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgRotation> {
} _MsgRotation_default_instance_;
class MsgMouseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgMouse> {
} _MsgMouse_default_instance_;
class MsgCellInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgCellInfo> {
} _MsgCellInfo_default_instance_;
class MsgInitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgInit> {
} _MsgInit_default_instance_;
class MsgResizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgResize> {
} _MsgResize_default_instance_;
class MsgWorklistItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgWorklistItem> {
} _MsgWorklistItem_default_instance_;
class MsgWorklistDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgWorklist> {
} _MsgWorklist_default_instance_;

namespace protobuf_mi_5fmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgString, context_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2Array, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2Array, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint2Array, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPaging, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPaging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPaging, page_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, axis_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, axis_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRotation, axis_z_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMouse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMouse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMouse, pre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMouse, cur_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMouse, tag_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCellInfo, height_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInit, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInit, series_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInit, cells_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResize, cells_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, patient_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, patient_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, series_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklistItem, imaging_modality_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklist, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWorklist, items_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(MsgString)},
  { 7, 14, sizeof(MsgPoint2)},
  { 16, 23, sizeof(MsgPoint2Array)},
  { 25, 31, sizeof(MsgPaging)},
  { 32, 41, sizeof(MsgRotation)},
  { 45, 53, sizeof(MsgMouse)},
  { 56, 66, sizeof(MsgCellInfo)},
  { 71, 79, sizeof(MsgInit)},
  { 82, 88, sizeof(MsgResize)},
  { 89, 98, sizeof(MsgWorklistItem)},
  { 102, 108, sizeof(MsgWorklist)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgPoint2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgPoint2Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgPaging_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgRotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgMouse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgCellInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgResize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgWorklistItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgWorklist_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mi_message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _MsgString_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MsgPoint2_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MsgPoint2Array_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MsgPaging_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _MsgRotation_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _MsgMouse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MsgCellInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MsgInit_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MsgResize_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MsgWorklistItem_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _MsgWorklist_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MsgString_default_instance_.DefaultConstruct();
  _MsgPoint2_default_instance_.DefaultConstruct();
  _MsgPoint2Array_default_instance_.DefaultConstruct();
  _MsgPaging_default_instance_.DefaultConstruct();
  _MsgRotation_default_instance_.DefaultConstruct();
  _MsgMouse_default_instance_.DefaultConstruct();
  _MsgCellInfo_default_instance_.DefaultConstruct();
  _MsgInit_default_instance_.DefaultConstruct();
  _MsgResize_default_instance_.DefaultConstruct();
  _MsgWorklistItem_default_instance_.DefaultConstruct();
  _MsgWorklist_default_instance_.DefaultConstruct();
  _MsgMouse_default_instance_.get_mutable()->pre_ = const_cast< ::medical_imaging::MsgPoint2*>(
      ::medical_imaging::MsgPoint2::internal_default_instance());
  _MsgMouse_default_instance_.get_mutable()->cur_ = const_cast< ::medical_imaging::MsgPoint2*>(
      ::medical_imaging::MsgPoint2::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020mi_message.proto\022\017medical_imaging\"\034\n\tM"
      "sgString\022\017\n\007context\030\001 \002(\t\"!\n\tMsgPoint2\022\t"
      "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"&\n\016MsgPoint2Array\022\t"
      "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\031\n\tMsgPaging\022\014\n\004pag"
      "e\030\001 \002(\005\"L\n\013MsgRotation\022\r\n\005angle\030\001 \002(\002\022\016\n"
      "\006axis_x\030\002 \002(\002\022\016\n\006axis_y\030\003 \002(\002\022\016\n\006axis_z\030"
      "\004 \002(\002\"i\n\010MsgMouse\022\'\n\003pre\030\001 \002(\0132\032.medical"
      "_imaging.MsgPoint2\022\'\n\003cur\030\002 \002(\0132\032.medica"
      "l_imaging.MsgPoint2\022\013\n\003tag\030\003 \002(\005\"Y\n\013MsgC"
      "ellInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\021\n\tdir"
      "ection\030\003 \002(\005\022\r\n\005width\030\004 \002(\005\022\016\n\006height\030\005 "
      "\002(\005\"W\n\007MsgInit\022\013\n\003pid\030\001 \002(\005\022\022\n\nseries_ui"
      "d\030\002 \002(\t\022+\n\005cells\030\003 \003(\0132\034.medical_imaging"
      ".MsgCellInfo\"8\n\tMsgResize\022+\n\005cells\030\001 \003(\013"
      "2\034.medical_imaging.MsgCellInfo\"i\n\017MsgWor"
      "klistItem\022\024\n\014patient_name\030\001 \002(\t\022\022\n\npatie"
      "nt_id\030\002 \002(\t\022\022\n\nseries_uid\030\003 \002(\t\022\030\n\020imagi"
      "ng_modality\030\004 \002(\t\">\n\013MsgWorklist\022/\n\005item"
      "s\030\001 \003(\0132 .medical_imaging.MsgWorklistIte"
      "m"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 761);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mi_message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mi_5fmessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgString::kContextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgString::MsgString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgString)
}
MsgString::MsgString(const MsgString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_context()) {
    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgString)
}

void MsgString::SharedCtor() {
  _cached_size_ = 0;
  context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgString::~MsgString() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgString)
  SharedDtor();
}

void MsgString::SharedDtor() {
  context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgString::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgString& MsgString::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgString* MsgString::New(::google::protobuf::Arena* arena) const {
  MsgString* n = new MsgString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgString::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgString)
  if (has_context()) {
    GOOGLE_DCHECK(!context_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*context_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string context = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_context()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->context().data(), static_cast<int>(this->context().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgString.context");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgString)
  return false;
#undef DO_
}

void MsgString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string context = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), static_cast<int>(this->context().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgString.context");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->context(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgString)
}

::google::protobuf::uint8* MsgString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string context = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->context().data(), static_cast<int>(this->context().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgString.context");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->context(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgString)
  return target;
}

size_t MsgString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string context = 1;
  if (has_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->context());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgString)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgString)
    MergeFrom(*source);
  }
}

void MsgString::MergeFrom(const MsgString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_context()) {
    set_has_context();
    context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.context_);
  }
}

void MsgString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgString::CopyFrom(const MsgString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgString::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MsgString::Swap(MsgString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgString::InternalSwap(MsgString* other) {
  context_.Swap(&other->context_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgString::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgString

// required string context = 1;
bool MsgString::has_context() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgString::set_has_context() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgString::clear_has_context() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgString::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
const ::std::string& MsgString::context() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgString.context)
  return context_.GetNoArena();
}
void MsgString::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgString.context)
}
#if LANG_CXX11
void MsgString::set_context(::std::string&& value) {
  set_has_context();
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgString.context)
}
#endif
void MsgString::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgString.context)
}
void MsgString::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgString.context)
}
::std::string* MsgString::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgString.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgString::release_context() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgString.context)
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgString::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgString.context)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPoint2::kXFieldNumber;
const int MsgPoint2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPoint2::MsgPoint2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgPoint2)
}
MsgPoint2::MsgPoint2(const MsgPoint2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgPoint2)
}

void MsgPoint2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

MsgPoint2::~MsgPoint2() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgPoint2)
  SharedDtor();
}

void MsgPoint2::SharedDtor() {
}

void MsgPoint2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPoint2::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgPoint2& MsgPoint2::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgPoint2* MsgPoint2::New(::google::protobuf::Arena* arena) const {
  MsgPoint2* n = new MsgPoint2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPoint2::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgPoint2)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgPoint2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgPoint2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgPoint2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgPoint2)
  return false;
#undef DO_
}

void MsgPoint2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgPoint2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgPoint2)
}

::google::protobuf::uint8* MsgPoint2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgPoint2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgPoint2)
  return target;
}

size_t MsgPoint2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgPoint2)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MsgPoint2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgPoint2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPoint2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgPoint2)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPoint2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPoint2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgPoint2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgPoint2)
    MergeFrom(*source);
  }
}

void MsgPoint2::MergeFrom(const MsgPoint2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgPoint2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgPoint2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgPoint2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPoint2::CopyFrom(const MsgPoint2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgPoint2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPoint2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MsgPoint2::Swap(MsgPoint2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPoint2::InternalSwap(MsgPoint2* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPoint2::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPoint2

// required float x = 1;
bool MsgPoint2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgPoint2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgPoint2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgPoint2::clear_x() {
  x_ = 0;
  clear_has_x();
}
float MsgPoint2::x() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgPoint2.x)
  return x_;
}
void MsgPoint2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgPoint2.x)
}

// required float y = 2;
bool MsgPoint2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgPoint2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgPoint2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgPoint2::clear_y() {
  y_ = 0;
  clear_has_y();
}
float MsgPoint2::y() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgPoint2.y)
  return y_;
}
void MsgPoint2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgPoint2.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPoint2Array::kXFieldNumber;
const int MsgPoint2Array::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPoint2Array::MsgPoint2Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgPoint2Array)
}
MsgPoint2Array::MsgPoint2Array(const MsgPoint2Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgPoint2Array)
}

void MsgPoint2Array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

MsgPoint2Array::~MsgPoint2Array() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgPoint2Array)
  SharedDtor();
}

void MsgPoint2Array::SharedDtor() {
}

void MsgPoint2Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPoint2Array::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgPoint2Array& MsgPoint2Array::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgPoint2Array* MsgPoint2Array::New(::google::protobuf::Arena* arena) const {
  MsgPoint2Array* n = new MsgPoint2Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPoint2Array::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgPoint2Array)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgPoint2Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgPoint2Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgPoint2Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgPoint2Array)
  return false;
#undef DO_
}

void MsgPoint2Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgPoint2Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgPoint2Array)
}

::google::protobuf::uint8* MsgPoint2Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgPoint2Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgPoint2Array)
  return target;
}

size_t MsgPoint2Array::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgPoint2Array)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MsgPoint2Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgPoint2Array)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPoint2Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgPoint2Array)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPoint2Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPoint2Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgPoint2Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgPoint2Array)
    MergeFrom(*source);
  }
}

void MsgPoint2Array::MergeFrom(const MsgPoint2Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgPoint2Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgPoint2Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgPoint2Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPoint2Array::CopyFrom(const MsgPoint2Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgPoint2Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPoint2Array::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MsgPoint2Array::Swap(MsgPoint2Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPoint2Array::InternalSwap(MsgPoint2Array* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPoint2Array::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPoint2Array

// required float x = 1;
bool MsgPoint2Array::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgPoint2Array::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgPoint2Array::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgPoint2Array::clear_x() {
  x_ = 0;
  clear_has_x();
}
float MsgPoint2Array::x() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgPoint2Array.x)
  return x_;
}
void MsgPoint2Array::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgPoint2Array.x)
}

// required float y = 2;
bool MsgPoint2Array::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgPoint2Array::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgPoint2Array::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgPoint2Array::clear_y() {
  y_ = 0;
  clear_has_y();
}
float MsgPoint2Array::y() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgPoint2Array.y)
  return y_;
}
void MsgPoint2Array::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgPoint2Array.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPaging::kPageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPaging::MsgPaging()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgPaging)
}
MsgPaging::MsgPaging(const MsgPaging& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgPaging)
}

void MsgPaging::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
}

MsgPaging::~MsgPaging() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgPaging)
  SharedDtor();
}

void MsgPaging::SharedDtor() {
}

void MsgPaging::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPaging::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgPaging& MsgPaging::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgPaging* MsgPaging::New(::google::protobuf::Arena* arena) const {
  MsgPaging* n = new MsgPaging;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPaging::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgPaging)
  page_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgPaging::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgPaging)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgPaging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgPaging)
  return false;
#undef DO_
}

void MsgPaging::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgPaging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgPaging)
}

::google::protobuf::uint8* MsgPaging::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgPaging)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgPaging)
  return target;
}

size_t MsgPaging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgPaging)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 page = 1;
  if (has_page()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPaging::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgPaging)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgPaging* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPaging>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgPaging)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgPaging)
    MergeFrom(*source);
  }
}

void MsgPaging::MergeFrom(const MsgPaging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgPaging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_page()) {
    set_page(from.page());
  }
}

void MsgPaging::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgPaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPaging::CopyFrom(const MsgPaging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgPaging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPaging::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MsgPaging::Swap(MsgPaging* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPaging::InternalSwap(MsgPaging* other) {
  std::swap(page_, other->page_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPaging::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPaging

// required int32 page = 1;
bool MsgPaging::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgPaging::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgPaging::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgPaging::clear_page() {
  page_ = 0;
  clear_has_page();
}
::google::protobuf::int32 MsgPaging::page() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgPaging.page)
  return page_;
}
void MsgPaging::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgPaging.page)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgRotation::kAngleFieldNumber;
const int MsgRotation::kAxisXFieldNumber;
const int MsgRotation::kAxisYFieldNumber;
const int MsgRotation::kAxisZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgRotation::MsgRotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgRotation)
}
MsgRotation::MsgRotation(const MsgRotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&axis_z_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(axis_z_));
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgRotation)
}

void MsgRotation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&axis_z_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(axis_z_));
}

MsgRotation::~MsgRotation() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgRotation)
  SharedDtor();
}

void MsgRotation::SharedDtor() {
}

void MsgRotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRotation::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgRotation& MsgRotation::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgRotation* MsgRotation::New(::google::protobuf::Arena* arena) const {
  MsgRotation* n = new MsgRotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgRotation::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgRotation)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&axis_z_) -
        reinterpret_cast<char*>(&angle_)) + sizeof(axis_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgRotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgRotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float axis_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_axis_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axis_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float axis_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_axis_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axis_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float axis_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_axis_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axis_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgRotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgRotation)
  return false;
#undef DO_
}

void MsgRotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  // required float axis_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->axis_x(), output);
  }

  // required float axis_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->axis_y(), output);
  }

  // required float axis_z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->axis_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgRotation)
}

::google::protobuf::uint8* MsgRotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgRotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  // required float axis_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->axis_x(), target);
  }

  // required float axis_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->axis_y(), target);
  }

  // required float axis_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->axis_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgRotation)
  return target;
}

size_t MsgRotation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgRotation)
  size_t total_size = 0;

  if (has_angle()) {
    // required float angle = 1;
    total_size += 1 + 4;
  }

  if (has_axis_x()) {
    // required float axis_x = 2;
    total_size += 1 + 4;
  }

  if (has_axis_y()) {
    // required float axis_y = 3;
    total_size += 1 + 4;
  }

  if (has_axis_z()) {
    // required float axis_z = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MsgRotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgRotation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float angle = 1;
    total_size += 1 + 4;

    // required float axis_x = 2;
    total_size += 1 + 4;

    // required float axis_y = 3;
    total_size += 1 + 4;

    // required float axis_z = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgRotation)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgRotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgRotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgRotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgRotation)
    MergeFrom(*source);
  }
}

void MsgRotation::MergeFrom(const MsgRotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgRotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      axis_x_ = from.axis_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      axis_y_ = from.axis_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      axis_z_ = from.axis_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgRotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRotation::CopyFrom(const MsgRotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgRotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MsgRotation::Swap(MsgRotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgRotation::InternalSwap(MsgRotation* other) {
  std::swap(angle_, other->angle_);
  std::swap(axis_x_, other->axis_x_);
  std::swap(axis_y_, other->axis_y_);
  std::swap(axis_z_, other->axis_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgRotation::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgRotation

// required float angle = 1;
bool MsgRotation::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgRotation::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgRotation::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgRotation::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
float MsgRotation::angle() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgRotation.angle)
  return angle_;
}
void MsgRotation::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgRotation.angle)
}

// required float axis_x = 2;
bool MsgRotation::has_axis_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgRotation::set_has_axis_x() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgRotation::clear_has_axis_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgRotation::clear_axis_x() {
  axis_x_ = 0;
  clear_has_axis_x();
}
float MsgRotation::axis_x() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgRotation.axis_x)
  return axis_x_;
}
void MsgRotation::set_axis_x(float value) {
  set_has_axis_x();
  axis_x_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgRotation.axis_x)
}

// required float axis_y = 3;
bool MsgRotation::has_axis_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgRotation::set_has_axis_y() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgRotation::clear_has_axis_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgRotation::clear_axis_y() {
  axis_y_ = 0;
  clear_has_axis_y();
}
float MsgRotation::axis_y() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgRotation.axis_y)
  return axis_y_;
}
void MsgRotation::set_axis_y(float value) {
  set_has_axis_y();
  axis_y_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgRotation.axis_y)
}

// required float axis_z = 4;
bool MsgRotation::has_axis_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgRotation::set_has_axis_z() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgRotation::clear_has_axis_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgRotation::clear_axis_z() {
  axis_z_ = 0;
  clear_has_axis_z();
}
float MsgRotation::axis_z() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgRotation.axis_z)
  return axis_z_;
}
void MsgRotation::set_axis_z(float value) {
  set_has_axis_z();
  axis_z_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgRotation.axis_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgMouse::kPreFieldNumber;
const int MsgMouse::kCurFieldNumber;
const int MsgMouse::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgMouse::MsgMouse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgMouse)
}
MsgMouse::MsgMouse(const MsgMouse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pre()) {
    pre_ = new ::medical_imaging::MsgPoint2(*from.pre_);
  } else {
    pre_ = NULL;
  }
  if (from.has_cur()) {
    cur_ = new ::medical_imaging::MsgPoint2(*from.cur_);
  } else {
    cur_ = NULL;
  }
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgMouse)
}

void MsgMouse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pre_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&pre_)) + sizeof(tag_));
}

MsgMouse::~MsgMouse() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgMouse)
  SharedDtor();
}

void MsgMouse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pre_;
  }
  if (this != internal_default_instance()) {
    delete cur_;
  }
}

void MsgMouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMouse::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgMouse& MsgMouse::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgMouse* MsgMouse::New(::google::protobuf::Arena* arena) const {
  MsgMouse* n = new MsgMouse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgMouse::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgMouse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pre()) {
      GOOGLE_DCHECK(pre_ != NULL);
      pre_->::medical_imaging::MsgPoint2::Clear();
    }
    if (has_cur()) {
      GOOGLE_DCHECK(cur_ != NULL);
      cur_->::medical_imaging::MsgPoint2::Clear();
    }
  }
  tag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgMouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgMouse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .medical_imaging.MsgPoint2 pre = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pre()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .medical_imaging.MsgPoint2 cur = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgMouse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgMouse)
  return false;
#undef DO_
}

void MsgMouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgMouse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .medical_imaging.MsgPoint2 pre = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pre_, output);
  }

  // required .medical_imaging.MsgPoint2 cur = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->cur_, output);
  }

  // required int32 tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgMouse)
}

::google::protobuf::uint8* MsgMouse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgMouse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .medical_imaging.MsgPoint2 pre = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pre_, deterministic, target);
  }

  // required .medical_imaging.MsgPoint2 cur = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->cur_, deterministic, target);
  }

  // required int32 tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgMouse)
  return target;
}

size_t MsgMouse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgMouse)
  size_t total_size = 0;

  if (has_pre()) {
    // required .medical_imaging.MsgPoint2 pre = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pre_);
  }

  if (has_cur()) {
    // required .medical_imaging.MsgPoint2 cur = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_);
  }

  if (has_tag()) {
    // required int32 tag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag());
  }

  return total_size;
}
size_t MsgMouse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgMouse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .medical_imaging.MsgPoint2 pre = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pre_);

    // required .medical_imaging.MsgPoint2 cur = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_);

    // required int32 tag = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMouse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgMouse)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgMouse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgMouse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgMouse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgMouse)
    MergeFrom(*source);
  }
}

void MsgMouse::MergeFrom(const MsgMouse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgMouse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pre()->::medical_imaging::MsgPoint2::MergeFrom(from.pre());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cur()->::medical_imaging::MsgPoint2::MergeFrom(from.cur());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgMouse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgMouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMouse::CopyFrom(const MsgMouse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgMouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMouse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_pre()) {
    if (!this->pre_->IsInitialized()) return false;
  }
  if (has_cur()) {
    if (!this->cur_->IsInitialized()) return false;
  }
  return true;
}

void MsgMouse::Swap(MsgMouse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgMouse::InternalSwap(MsgMouse* other) {
  std::swap(pre_, other->pre_);
  std::swap(cur_, other->cur_);
  std::swap(tag_, other->tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgMouse::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgMouse

// required .medical_imaging.MsgPoint2 pre = 1;
bool MsgMouse::has_pre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgMouse::set_has_pre() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgMouse::clear_has_pre() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgMouse::clear_pre() {
  if (pre_ != NULL) pre_->::medical_imaging::MsgPoint2::Clear();
  clear_has_pre();
}
const ::medical_imaging::MsgPoint2& MsgMouse::pre() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgMouse.pre)
  return pre_ != NULL ? *pre_
                         : *::medical_imaging::MsgPoint2::internal_default_instance();
}
::medical_imaging::MsgPoint2* MsgMouse::mutable_pre() {
  set_has_pre();
  if (pre_ == NULL) {
    pre_ = new ::medical_imaging::MsgPoint2;
  }
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgMouse.pre)
  return pre_;
}
::medical_imaging::MsgPoint2* MsgMouse::release_pre() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgMouse.pre)
  clear_has_pre();
  ::medical_imaging::MsgPoint2* temp = pre_;
  pre_ = NULL;
  return temp;
}
void MsgMouse::set_allocated_pre(::medical_imaging::MsgPoint2* pre) {
  delete pre_;
  pre_ = pre;
  if (pre) {
    set_has_pre();
  } else {
    clear_has_pre();
  }
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgMouse.pre)
}

// required .medical_imaging.MsgPoint2 cur = 2;
bool MsgMouse::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgMouse::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgMouse::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgMouse::clear_cur() {
  if (cur_ != NULL) cur_->::medical_imaging::MsgPoint2::Clear();
  clear_has_cur();
}
const ::medical_imaging::MsgPoint2& MsgMouse::cur() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgMouse.cur)
  return cur_ != NULL ? *cur_
                         : *::medical_imaging::MsgPoint2::internal_default_instance();
}
::medical_imaging::MsgPoint2* MsgMouse::mutable_cur() {
  set_has_cur();
  if (cur_ == NULL) {
    cur_ = new ::medical_imaging::MsgPoint2;
  }
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgMouse.cur)
  return cur_;
}
::medical_imaging::MsgPoint2* MsgMouse::release_cur() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgMouse.cur)
  clear_has_cur();
  ::medical_imaging::MsgPoint2* temp = cur_;
  cur_ = NULL;
  return temp;
}
void MsgMouse::set_allocated_cur(::medical_imaging::MsgPoint2* cur) {
  delete cur_;
  cur_ = cur;
  if (cur) {
    set_has_cur();
  } else {
    clear_has_cur();
  }
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgMouse.cur)
}

// required int32 tag = 3;
bool MsgMouse::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgMouse::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgMouse::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgMouse::clear_tag() {
  tag_ = 0;
  clear_has_tag();
}
::google::protobuf::int32 MsgMouse::tag() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgMouse.tag)
  return tag_;
}
void MsgMouse::set_tag(::google::protobuf::int32 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgMouse.tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgCellInfo::kIdFieldNumber;
const int MsgCellInfo::kTypeFieldNumber;
const int MsgCellInfo::kDirectionFieldNumber;
const int MsgCellInfo::kWidthFieldNumber;
const int MsgCellInfo::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgCellInfo::MsgCellInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgCellInfo)
}
MsgCellInfo::MsgCellInfo(const MsgCellInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&id_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgCellInfo)
}

void MsgCellInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&id_)) + sizeof(height_));
}

MsgCellInfo::~MsgCellInfo() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgCellInfo)
  SharedDtor();
}

void MsgCellInfo::SharedDtor() {
}

void MsgCellInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCellInfo::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgCellInfo& MsgCellInfo::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgCellInfo* MsgCellInfo::New(::google::protobuf::Arena* arena) const {
  MsgCellInfo* n = new MsgCellInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgCellInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgCellInfo)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&id_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgCellInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgCellInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgCellInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgCellInfo)
  return false;
#undef DO_
}

void MsgCellInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgCellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->direction(), output);
  }

  // required int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // required int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgCellInfo)
}

::google::protobuf::uint8* MsgCellInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgCellInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->direction(), target);
  }

  // required int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // required int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgCellInfo)
  return target;
}

size_t MsgCellInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgCellInfo)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_direction()) {
    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  if (has_width()) {
    // required int32 width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_height()) {
    // required int32 height = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  return total_size;
}
size_t MsgCellInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgCellInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required int32 direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());

    // required int32 width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required int32 height = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCellInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgCellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgCellInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgCellInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgCellInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgCellInfo)
    MergeFrom(*source);
  }
}

void MsgCellInfo::MergeFrom(const MsgCellInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgCellInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgCellInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgCellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCellInfo::CopyFrom(const MsgCellInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgCellInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCellInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void MsgCellInfo::Swap(MsgCellInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgCellInfo::InternalSwap(MsgCellInfo* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(direction_, other->direction_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgCellInfo::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgCellInfo

// required int32 id = 1;
bool MsgCellInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgCellInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgCellInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgCellInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 MsgCellInfo::id() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgCellInfo.id)
  return id_;
}
void MsgCellInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgCellInfo.id)
}

// required int32 type = 2;
bool MsgCellInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgCellInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgCellInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgCellInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 MsgCellInfo::type() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgCellInfo.type)
  return type_;
}
void MsgCellInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgCellInfo.type)
}

// required int32 direction = 3;
bool MsgCellInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgCellInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgCellInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgCellInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
::google::protobuf::int32 MsgCellInfo::direction() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgCellInfo.direction)
  return direction_;
}
void MsgCellInfo::set_direction(::google::protobuf::int32 value) {
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgCellInfo.direction)
}

// required int32 width = 4;
bool MsgCellInfo::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgCellInfo::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgCellInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgCellInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 MsgCellInfo::width() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgCellInfo.width)
  return width_;
}
void MsgCellInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgCellInfo.width)
}

// required int32 height = 5;
bool MsgCellInfo::has_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MsgCellInfo::set_has_height() {
  _has_bits_[0] |= 0x00000010u;
}
void MsgCellInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void MsgCellInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 MsgCellInfo::height() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgCellInfo.height)
  return height_;
}
void MsgCellInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgCellInfo.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgInit::kPidFieldNumber;
const int MsgInit::kSeriesUidFieldNumber;
const int MsgInit::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgInit::MsgInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgInit)
}
MsgInit::MsgInit(const MsgInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  series_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_series_uid()) {
    series_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.series_uid_);
  }
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgInit)
}

void MsgInit::SharedCtor() {
  _cached_size_ = 0;
  series_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = 0;
}

MsgInit::~MsgInit() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgInit)
  SharedDtor();
}

void MsgInit::SharedDtor() {
  series_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInit::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgInit& MsgInit::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgInit* MsgInit::New(::google::protobuf::Arena* arena) const {
  MsgInit* n = new MsgInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgInit::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgInit)
  cells_.Clear();
  if (has_series_uid()) {
    GOOGLE_DCHECK(!series_uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*series_uid_.UnsafeRawStringPointer())->clear();
  }
  pid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string series_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_series_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->series_uid().data(), static_cast<int>(this->series_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgInit.series_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .medical_imaging.MsgCellInfo cells = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgInit)
  return false;
#undef DO_
}

void MsgInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // required string series_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series_uid().data(), static_cast<int>(this->series_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgInit.series_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->series_uid(), output);
  }

  // repeated .medical_imaging.MsgCellInfo cells = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgInit)
}

::google::protobuf::uint8* MsgInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 pid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // required string series_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series_uid().data(), static_cast<int>(this->series_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgInit.series_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->series_uid(), target);
  }

  // repeated .medical_imaging.MsgCellInfo cells = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cells(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgInit)
  return target;
}

size_t MsgInit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgInit)
  size_t total_size = 0;

  if (has_series_uid()) {
    // required string series_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->series_uid());
  }

  if (has_pid()) {
    // required int32 pid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  return total_size;
}
size_t MsgInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string series_uid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->series_uid());

    // required int32 pid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .medical_imaging.MsgCellInfo cells = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgInit)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgInit)
    MergeFrom(*source);
  }
}

void MsgInit::MergeFrom(const MsgInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_series_uid();
      series_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.series_uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      pid_ = from.pid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MsgInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInit::CopyFrom(const MsgInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void MsgInit::Swap(MsgInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgInit::InternalSwap(MsgInit* other) {
  cells_.InternalSwap(&other->cells_);
  series_uid_.Swap(&other->series_uid_);
  std::swap(pid_, other->pid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgInit::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgInit

// required int32 pid = 1;
bool MsgInit::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgInit::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgInit::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgInit::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
::google::protobuf::int32 MsgInit::pid() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgInit.pid)
  return pid_;
}
void MsgInit::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:medical_imaging.MsgInit.pid)
}

// required string series_uid = 2;
bool MsgInit::has_series_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgInit::set_has_series_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgInit::clear_has_series_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgInit::clear_series_uid() {
  series_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_series_uid();
}
const ::std::string& MsgInit::series_uid() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgInit.series_uid)
  return series_uid_.GetNoArena();
}
void MsgInit::set_series_uid(const ::std::string& value) {
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgInit.series_uid)
}
#if LANG_CXX11
void MsgInit::set_series_uid(::std::string&& value) {
  set_has_series_uid();
  series_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgInit.series_uid)
}
#endif
void MsgInit::set_series_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgInit.series_uid)
}
void MsgInit::set_series_uid(const char* value, size_t size) {
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgInit.series_uid)
}
::std::string* MsgInit::mutable_series_uid() {
  set_has_series_uid();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgInit.series_uid)
  return series_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgInit::release_series_uid() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgInit.series_uid)
  clear_has_series_uid();
  return series_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgInit::set_allocated_series_uid(::std::string* series_uid) {
  if (series_uid != NULL) {
    set_has_series_uid();
  } else {
    clear_has_series_uid();
  }
  series_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), series_uid);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgInit.series_uid)
}

// repeated .medical_imaging.MsgCellInfo cells = 3;
int MsgInit::cells_size() const {
  return cells_.size();
}
void MsgInit::clear_cells() {
  cells_.Clear();
}
const ::medical_imaging::MsgCellInfo& MsgInit::cells(int index) const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgInit.cells)
  return cells_.Get(index);
}
::medical_imaging::MsgCellInfo* MsgInit::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgInit.cells)
  return cells_.Mutable(index);
}
::medical_imaging::MsgCellInfo* MsgInit::add_cells() {
  // @@protoc_insertion_point(field_add:medical_imaging.MsgInit.cells)
  return cells_.Add();
}
::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgCellInfo >*
MsgInit::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:medical_imaging.MsgInit.cells)
  return &cells_;
}
const ::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgCellInfo >&
MsgInit::cells() const {
  // @@protoc_insertion_point(field_list:medical_imaging.MsgInit.cells)
  return cells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgResize::kCellsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgResize::MsgResize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgResize)
}
MsgResize::MsgResize(const MsgResize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgResize)
}

void MsgResize::SharedCtor() {
  _cached_size_ = 0;
}

MsgResize::~MsgResize() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgResize)
  SharedDtor();
}

void MsgResize::SharedDtor() {
}

void MsgResize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResize::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgResize& MsgResize::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgResize* MsgResize::New(::google::protobuf::Arena* arena) const {
  MsgResize* n = new MsgResize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgResize::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgResize)
  cells_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgResize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgResize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .medical_imaging.MsgCellInfo cells = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgResize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgResize)
  return false;
#undef DO_
}

void MsgResize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgResize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .medical_imaging.MsgCellInfo cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgResize)
}

::google::protobuf::uint8* MsgResize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgResize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .medical_imaging.MsgCellInfo cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cells_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cells(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgResize)
  return target;
}

size_t MsgResize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgResize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .medical_imaging.MsgCellInfo cells = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cells_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cells(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgResize)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgResize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgResize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgResize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgResize)
    MergeFrom(*source);
  }
}

void MsgResize::MergeFrom(const MsgResize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgResize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
}

void MsgResize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgResize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResize::CopyFrom(const MsgResize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgResize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResize::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void MsgResize::Swap(MsgResize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgResize::InternalSwap(MsgResize* other) {
  cells_.InternalSwap(&other->cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgResize::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgResize

// repeated .medical_imaging.MsgCellInfo cells = 1;
int MsgResize::cells_size() const {
  return cells_.size();
}
void MsgResize::clear_cells() {
  cells_.Clear();
}
const ::medical_imaging::MsgCellInfo& MsgResize::cells(int index) const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgResize.cells)
  return cells_.Get(index);
}
::medical_imaging::MsgCellInfo* MsgResize::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgResize.cells)
  return cells_.Mutable(index);
}
::medical_imaging::MsgCellInfo* MsgResize::add_cells() {
  // @@protoc_insertion_point(field_add:medical_imaging.MsgResize.cells)
  return cells_.Add();
}
::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgCellInfo >*
MsgResize::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:medical_imaging.MsgResize.cells)
  return &cells_;
}
const ::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgCellInfo >&
MsgResize::cells() const {
  // @@protoc_insertion_point(field_list:medical_imaging.MsgResize.cells)
  return cells_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgWorklistItem::kPatientNameFieldNumber;
const int MsgWorklistItem::kPatientIdFieldNumber;
const int MsgWorklistItem::kSeriesUidFieldNumber;
const int MsgWorklistItem::kImagingModalityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgWorklistItem::MsgWorklistItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgWorklistItem)
}
MsgWorklistItem::MsgWorklistItem(const MsgWorklistItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  patient_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_patient_name()) {
    patient_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patient_name_);
  }
  patient_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_patient_id()) {
    patient_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
  }
  series_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_series_uid()) {
    series_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.series_uid_);
  }
  imaging_modality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imaging_modality()) {
    imaging_modality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imaging_modality_);
  }
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgWorklistItem)
}

void MsgWorklistItem::SharedCtor() {
  _cached_size_ = 0;
  patient_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patient_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imaging_modality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgWorklistItem::~MsgWorklistItem() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgWorklistItem)
  SharedDtor();
}

void MsgWorklistItem::SharedDtor() {
  patient_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  patient_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  series_uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imaging_modality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgWorklistItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWorklistItem::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgWorklistItem& MsgWorklistItem::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgWorklistItem* MsgWorklistItem::New(::google::protobuf::Arena* arena) const {
  MsgWorklistItem* n = new MsgWorklistItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgWorklistItem::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgWorklistItem)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_patient_name()) {
      GOOGLE_DCHECK(!patient_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*patient_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_patient_id()) {
      GOOGLE_DCHECK(!patient_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*patient_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_series_uid()) {
      GOOGLE_DCHECK(!series_uid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*series_uid_.UnsafeRawStringPointer())->clear();
    }
    if (has_imaging_modality()) {
      GOOGLE_DCHECK(!imaging_modality_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*imaging_modality_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgWorklistItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgWorklistItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string patient_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patient_name().data(), static_cast<int>(this->patient_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgWorklistItem.patient_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string patient_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patient_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->patient_id().data(), static_cast<int>(this->patient_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgWorklistItem.patient_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string series_uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_series_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->series_uid().data(), static_cast<int>(this->series_uid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgWorklistItem.series_uid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string imaging_modality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imaging_modality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imaging_modality().data(), static_cast<int>(this->imaging_modality().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "medical_imaging.MsgWorklistItem.imaging_modality");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgWorklistItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgWorklistItem)
  return false;
#undef DO_
}

void MsgWorklistItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgWorklistItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string patient_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_name().data(), static_cast<int>(this->patient_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.patient_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->patient_name(), output);
  }

  // required string patient_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.patient_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->patient_id(), output);
  }

  // required string series_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series_uid().data(), static_cast<int>(this->series_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.series_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->series_uid(), output);
  }

  // required string imaging_modality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imaging_modality().data(), static_cast<int>(this->imaging_modality().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.imaging_modality");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->imaging_modality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgWorklistItem)
}

::google::protobuf::uint8* MsgWorklistItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgWorklistItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string patient_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_name().data(), static_cast<int>(this->patient_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.patient_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patient_name(), target);
  }

  // required string patient_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->patient_id().data(), static_cast<int>(this->patient_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.patient_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patient_id(), target);
  }

  // required string series_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->series_uid().data(), static_cast<int>(this->series_uid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.series_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->series_uid(), target);
  }

  // required string imaging_modality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imaging_modality().data(), static_cast<int>(this->imaging_modality().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "medical_imaging.MsgWorklistItem.imaging_modality");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imaging_modality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgWorklistItem)
  return target;
}

size_t MsgWorklistItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:medical_imaging.MsgWorklistItem)
  size_t total_size = 0;

  if (has_patient_name()) {
    // required string patient_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->patient_name());
  }

  if (has_patient_id()) {
    // required string patient_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->patient_id());
  }

  if (has_series_uid()) {
    // required string series_uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->series_uid());
  }

  if (has_imaging_modality()) {
    // required string imaging_modality = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imaging_modality());
  }

  return total_size;
}
size_t MsgWorklistItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgWorklistItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string patient_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->patient_name());

    // required string patient_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->patient_id());

    // required string series_uid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->series_uid());

    // required string imaging_modality = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imaging_modality());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWorklistItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgWorklistItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgWorklistItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgWorklistItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgWorklistItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgWorklistItem)
    MergeFrom(*source);
  }
}

void MsgWorklistItem::MergeFrom(const MsgWorklistItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgWorklistItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_patient_name();
      patient_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patient_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_patient_id();
      patient_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.patient_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_series_uid();
      series_uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.series_uid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_imaging_modality();
      imaging_modality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imaging_modality_);
    }
  }
}

void MsgWorklistItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgWorklistItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWorklistItem::CopyFrom(const MsgWorklistItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgWorklistItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWorklistItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MsgWorklistItem::Swap(MsgWorklistItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgWorklistItem::InternalSwap(MsgWorklistItem* other) {
  patient_name_.Swap(&other->patient_name_);
  patient_id_.Swap(&other->patient_id_);
  series_uid_.Swap(&other->series_uid_);
  imaging_modality_.Swap(&other->imaging_modality_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgWorklistItem::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgWorklistItem

// required string patient_name = 1;
bool MsgWorklistItem::has_patient_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgWorklistItem::set_has_patient_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgWorklistItem::clear_has_patient_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgWorklistItem::clear_patient_name() {
  patient_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_patient_name();
}
const ::std::string& MsgWorklistItem::patient_name() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgWorklistItem.patient_name)
  return patient_name_.GetNoArena();
}
void MsgWorklistItem::set_patient_name(const ::std::string& value) {
  set_has_patient_name();
  patient_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgWorklistItem.patient_name)
}
#if LANG_CXX11
void MsgWorklistItem::set_patient_name(::std::string&& value) {
  set_has_patient_name();
  patient_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgWorklistItem.patient_name)
}
#endif
void MsgWorklistItem::set_patient_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_patient_name();
  patient_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgWorklistItem.patient_name)
}
void MsgWorklistItem::set_patient_name(const char* value, size_t size) {
  set_has_patient_name();
  patient_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgWorklistItem.patient_name)
}
::std::string* MsgWorklistItem::mutable_patient_name() {
  set_has_patient_name();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgWorklistItem.patient_name)
  return patient_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgWorklistItem::release_patient_name() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgWorklistItem.patient_name)
  clear_has_patient_name();
  return patient_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgWorklistItem::set_allocated_patient_name(::std::string* patient_name) {
  if (patient_name != NULL) {
    set_has_patient_name();
  } else {
    clear_has_patient_name();
  }
  patient_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), patient_name);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgWorklistItem.patient_name)
}

// required string patient_id = 2;
bool MsgWorklistItem::has_patient_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MsgWorklistItem::set_has_patient_id() {
  _has_bits_[0] |= 0x00000002u;
}
void MsgWorklistItem::clear_has_patient_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void MsgWorklistItem::clear_patient_id() {
  patient_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_patient_id();
}
const ::std::string& MsgWorklistItem::patient_id() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgWorklistItem.patient_id)
  return patient_id_.GetNoArena();
}
void MsgWorklistItem::set_patient_id(const ::std::string& value) {
  set_has_patient_id();
  patient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgWorklistItem.patient_id)
}
#if LANG_CXX11
void MsgWorklistItem::set_patient_id(::std::string&& value) {
  set_has_patient_id();
  patient_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgWorklistItem.patient_id)
}
#endif
void MsgWorklistItem::set_patient_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_patient_id();
  patient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgWorklistItem.patient_id)
}
void MsgWorklistItem::set_patient_id(const char* value, size_t size) {
  set_has_patient_id();
  patient_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgWorklistItem.patient_id)
}
::std::string* MsgWorklistItem::mutable_patient_id() {
  set_has_patient_id();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgWorklistItem.patient_id)
  return patient_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgWorklistItem::release_patient_id() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgWorklistItem.patient_id)
  clear_has_patient_id();
  return patient_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgWorklistItem::set_allocated_patient_id(::std::string* patient_id) {
  if (patient_id != NULL) {
    set_has_patient_id();
  } else {
    clear_has_patient_id();
  }
  patient_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), patient_id);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgWorklistItem.patient_id)
}

// required string series_uid = 3;
bool MsgWorklistItem::has_series_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MsgWorklistItem::set_has_series_uid() {
  _has_bits_[0] |= 0x00000004u;
}
void MsgWorklistItem::clear_has_series_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MsgWorklistItem::clear_series_uid() {
  series_uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_series_uid();
}
const ::std::string& MsgWorklistItem::series_uid() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgWorklistItem.series_uid)
  return series_uid_.GetNoArena();
}
void MsgWorklistItem::set_series_uid(const ::std::string& value) {
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgWorklistItem.series_uid)
}
#if LANG_CXX11
void MsgWorklistItem::set_series_uid(::std::string&& value) {
  set_has_series_uid();
  series_uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgWorklistItem.series_uid)
}
#endif
void MsgWorklistItem::set_series_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgWorklistItem.series_uid)
}
void MsgWorklistItem::set_series_uid(const char* value, size_t size) {
  set_has_series_uid();
  series_uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgWorklistItem.series_uid)
}
::std::string* MsgWorklistItem::mutable_series_uid() {
  set_has_series_uid();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgWorklistItem.series_uid)
  return series_uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgWorklistItem::release_series_uid() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgWorklistItem.series_uid)
  clear_has_series_uid();
  return series_uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgWorklistItem::set_allocated_series_uid(::std::string* series_uid) {
  if (series_uid != NULL) {
    set_has_series_uid();
  } else {
    clear_has_series_uid();
  }
  series_uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), series_uid);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgWorklistItem.series_uid)
}

// required string imaging_modality = 4;
bool MsgWorklistItem::has_imaging_modality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MsgWorklistItem::set_has_imaging_modality() {
  _has_bits_[0] |= 0x00000008u;
}
void MsgWorklistItem::clear_has_imaging_modality() {
  _has_bits_[0] &= ~0x00000008u;
}
void MsgWorklistItem::clear_imaging_modality() {
  imaging_modality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imaging_modality();
}
const ::std::string& MsgWorklistItem::imaging_modality() const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgWorklistItem.imaging_modality)
  return imaging_modality_.GetNoArena();
}
void MsgWorklistItem::set_imaging_modality(const ::std::string& value) {
  set_has_imaging_modality();
  imaging_modality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:medical_imaging.MsgWorklistItem.imaging_modality)
}
#if LANG_CXX11
void MsgWorklistItem::set_imaging_modality(::std::string&& value) {
  set_has_imaging_modality();
  imaging_modality_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:medical_imaging.MsgWorklistItem.imaging_modality)
}
#endif
void MsgWorklistItem::set_imaging_modality(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imaging_modality();
  imaging_modality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:medical_imaging.MsgWorklistItem.imaging_modality)
}
void MsgWorklistItem::set_imaging_modality(const char* value, size_t size) {
  set_has_imaging_modality();
  imaging_modality_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:medical_imaging.MsgWorklistItem.imaging_modality)
}
::std::string* MsgWorklistItem::mutable_imaging_modality() {
  set_has_imaging_modality();
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgWorklistItem.imaging_modality)
  return imaging_modality_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgWorklistItem::release_imaging_modality() {
  // @@protoc_insertion_point(field_release:medical_imaging.MsgWorklistItem.imaging_modality)
  clear_has_imaging_modality();
  return imaging_modality_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgWorklistItem::set_allocated_imaging_modality(::std::string* imaging_modality) {
  if (imaging_modality != NULL) {
    set_has_imaging_modality();
  } else {
    clear_has_imaging_modality();
  }
  imaging_modality_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imaging_modality);
  // @@protoc_insertion_point(field_set_allocated:medical_imaging.MsgWorklistItem.imaging_modality)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgWorklist::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgWorklist::MsgWorklist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mi_5fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:medical_imaging.MsgWorklist)
}
MsgWorklist::MsgWorklist(const MsgWorklist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:medical_imaging.MsgWorklist)
}

void MsgWorklist::SharedCtor() {
  _cached_size_ = 0;
}

MsgWorklist::~MsgWorklist() {
  // @@protoc_insertion_point(destructor:medical_imaging.MsgWorklist)
  SharedDtor();
}

void MsgWorklist::SharedDtor() {
}

void MsgWorklist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgWorklist::descriptor() {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgWorklist& MsgWorklist::default_instance() {
  protobuf_mi_5fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgWorklist* MsgWorklist::New(::google::protobuf::Arena* arena) const {
  MsgWorklist* n = new MsgWorklist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgWorklist::Clear() {
// @@protoc_insertion_point(message_clear_start:medical_imaging.MsgWorklist)
  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MsgWorklist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:medical_imaging.MsgWorklist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .medical_imaging.MsgWorklistItem items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:medical_imaging.MsgWorklist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:medical_imaging.MsgWorklist)
  return false;
#undef DO_
}

void MsgWorklist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:medical_imaging.MsgWorklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .medical_imaging.MsgWorklistItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:medical_imaging.MsgWorklist)
}

::google::protobuf::uint8* MsgWorklist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:medical_imaging.MsgWorklist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .medical_imaging.MsgWorklistItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:medical_imaging.MsgWorklist)
  return target;
}

size_t MsgWorklist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:medical_imaging.MsgWorklist)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .medical_imaging.MsgWorklistItem items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgWorklist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:medical_imaging.MsgWorklist)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgWorklist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgWorklist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:medical_imaging.MsgWorklist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:medical_imaging.MsgWorklist)
    MergeFrom(*source);
  }
}

void MsgWorklist::MergeFrom(const MsgWorklist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:medical_imaging.MsgWorklist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void MsgWorklist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:medical_imaging.MsgWorklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWorklist::CopyFrom(const MsgWorklist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:medical_imaging.MsgWorklist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWorklist::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void MsgWorklist::Swap(MsgWorklist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgWorklist::InternalSwap(MsgWorklist* other) {
  items_.InternalSwap(&other->items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgWorklist::GetMetadata() const {
  protobuf_mi_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mi_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgWorklist

// repeated .medical_imaging.MsgWorklistItem items = 1;
int MsgWorklist::items_size() const {
  return items_.size();
}
void MsgWorklist::clear_items() {
  items_.Clear();
}
const ::medical_imaging::MsgWorklistItem& MsgWorklist::items(int index) const {
  // @@protoc_insertion_point(field_get:medical_imaging.MsgWorklist.items)
  return items_.Get(index);
}
::medical_imaging::MsgWorklistItem* MsgWorklist::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:medical_imaging.MsgWorklist.items)
  return items_.Mutable(index);
}
::medical_imaging::MsgWorklistItem* MsgWorklist::add_items() {
  // @@protoc_insertion_point(field_add:medical_imaging.MsgWorklist.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgWorklistItem >*
MsgWorklist::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:medical_imaging.MsgWorklist.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::medical_imaging::MsgWorklistItem >&
MsgWorklist::items() const {
  // @@protoc_insertion_point(field_list:medical_imaging.MsgWorklist.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace medical_imaging

// @@protoc_insertion_point(global_scope)
